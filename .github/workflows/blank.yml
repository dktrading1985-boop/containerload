name: CI/CD â€” Build, Push & Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.REGISTRY }}
  NAMESPACE: ${{ secrets.DOCKERHUB_NAMESPACE }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/containerload-frontend:latest

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/containerload-api:latest

  deploy:
    needs: build-and-push
    if: ${{ secrets.DO_DEPLOY == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y openssh-client

      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}

      - name: Deploy on Droplet
        run: |
          echo "Deploying to droplet ${{ secrets.DO_HOST }}"
          ssh -o StrictHostKeyChecking=no ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} "\
            cd ${{ secrets.REMOTE_COMPOSE_DIR }} && \
            docker login -u '${{ secrets.REGISTRY_USERNAME }}' -p '${{ secrets.REGISTRY_PASSWORD }}' ${{ secrets.REGISTRY }} && \
            docker compose -f docker-compose.yml -f docker-compose.frontend.yml pull && \
            docker compose -f docker-compose.yml -f docker-compose.frontend.yml up -d --no-deps --build && \
            docker system prune -f \
          "
